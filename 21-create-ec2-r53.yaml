- name: create ec2 instance and r53 records
  hosts: local
  connection: local
  become: yes
  vars: # below values will change everytime whenever the new server creates
    vpc_subnet_id: "subnet-0ccd4e3fdde9abf99"
    security_group: "sg-07374e41b5d05c16e"
    image_id: "ami-09c813fb71547fc4f"
    instance_type: "t2.micro"
    instances:
    - mysql
    - backend
    - frontend
    zone: "jagadeesh.online"
  tasks:
  - name: install boto3 and botocore
    ansible.builtin.pip:
      name:
      - boto3
      - botocore
      executable: pip3.9
  - name: create ec2 instance
    amazon.aws.ec2_instance:
      name: "{{ item }}"
      vpc_subnet_id: "{{ vpc_subnet_id }}"
      instance_type: "{{ instance_type }}"
      security_group: "{{ security_group }}"
      image_id: "{{ image_id }}"
      region: "{{ region }}"
    loop: "{{ instances }}"
    register: ec2_instances
  - name: print the output
    ansible.builtin.debug:
      msg: "{{ ec2_instances }}"
  - name: create r53 private records
    amazon.aws.route53:
      state: present
      zone: "{{ zone }}"
      record: "{{ item.item }}.{{ zone }}" # mysql.jagadeesh.online
      type: A
      ttl: 1
      value: "{{ item.instances[0].private_ip_address }}"
      wait: true
      overwrite: true # Used to overwrite the existing records
    loop: "{{ ec2_instances.results }}"
  - name: create r53 public record for frontend
    amazon.aws.route53:
      state: present
      zone: "{{ zone }}"
      record: "{{ zone }}" # jagadeesh.online
      type: A
      ttl: 1
      value: "{{ item.instances[0].public_ip_address }}"
      wait: true
      overwrite: true # Used to overwrite the existing records
    loop: "{{ ec2_instances.results }}"
    when: item.item == "frontend" #when keyword should not have {{}}